/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import doctor.Doctor;
import doctor.DoctorDirectory;
import hospital.Hospital;
import hospital.HospitalDirectory;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import model.state.city.community.CommunityDirectory;
import patient.Patient;
import patient.PatientDirectory;
import person.Person;
import person.PersonDirectory;
import rbac.context.RbacApplicationContext;
import ui.crud.panels.HospitalCrud;
import ui.crud.panels.PatientCrud;
import ui.crud.panels.PersonCrud;
import us.state.city.community.Community;

/**
 *
 * @author rohitpanicker
 */
public class CommunityAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form CommunityAdminPanel
     */
    public CommunityAdminPanel() {
        initComponents();
        populateComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        logoutLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        allHospitalBtn = new javax.swing.JButton();
        allDoctorsBtn = new javax.swing.JButton();
        allPersonsBtn = new javax.swing.JButton();
        allPatientsBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecords = new javax.swing.JTable();
        updateBtn = new javax.swing.JButton();
        communityNameSearchLabel = new javax.swing.JLabel();
        communityNameSearchComboBox = new javax.swing.JComboBox<>();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(0, 153, 0));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("MEDICAL RESOURCE FINDER");

        logoutLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        logoutLabel.setForeground(new java.awt.Color(255, 255, 255));
        logoutLabel.setText("Logout");
        logoutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logoutLabelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(479, 479, 479)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 296, Short.MAX_VALUE)
                .addComponent(logoutLabel)
                .addGap(211, 211, 211))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(logoutLabel))
                .addContainerGap())
        );

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 1390, 70));

        jPanel4.setBackground(new java.awt.Color(0, 204, 51));

        jPanel5.setBackground(new java.awt.Color(200, 248, 202));

        jLabel5.setBackground(new java.awt.Color(0, 102, 51));
        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("WELCOME");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        allHospitalBtn.setText("All Hospitals");
        allHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allHospitalBtnActionPerformed(evt);
            }
        });

        allDoctorsBtn.setText("All Doctors");
        allDoctorsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allDoctorsBtnActionPerformed(evt);
            }
        });

        allPersonsBtn.setText("All Registered Users");
        allPersonsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allPersonsBtnActionPerformed(evt);
            }
        });

        allPatientsBtn.setText("All Patients");
        allPatientsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allPatientsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(allPersonsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(allPatientsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(allHospitalBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(allDoctorsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(251, 251, 251)
                .addComponent(allPatientsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(allPersonsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(382, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(159, 159, 159)
                    .addComponent(allHospitalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(661, Short.MAX_VALUE)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(248, 248, 248)
                    .addComponent(allDoctorsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(572, Short.MAX_VALUE)))
        );

        add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 260, 860));

        tblRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Gender", "Age"
            }
        ));
        jScrollPane1.setViewportView(tblRecords);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 1060, 200));

        updateBtn.setText("Update Hospital Record");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 480, 230, 40));

        communityNameSearchLabel.setText("Community Name");
        add(communityNameSearchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, 140, 30));

        communityNameSearchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(communityNameSearchComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 110, 180, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void logoutLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutLabelMousePressed
        // TODO add your handling code here:

        RbacApplicationContext rbacApplicationContext = RbacApplicationContext.getInstance();
        rbacApplicationContext.setRoleContext(null);
        rbacApplicationContext.setUser(null);
        JOptionPane.showMessageDialog(this, "Logged Out");
        HomeScreenNotDefault homeScreenNotDefault = new HomeScreenNotDefault();
        HomeScreen.homeScreen.getjSplitPane1().setRightComponent(homeScreenNotDefault);
        HomeScreen.homeScreen.getjSplitPane1().setDividerLocation(150);
    }//GEN-LAST:event_logoutLabelMousePressed

    private void allHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allHospitalBtnActionPerformed
        // TODO add your handling code here:
        updateBtn.setText("Update Hospital Record");
        String searchText= communityNameSearchComboBox.getItemAt(communityNameSearchComboBox.getSelectedIndex());
     populateHospitalTable(HospitalDirectory.hospitalList, searchText);

    }//GEN-LAST:event_allHospitalBtnActionPerformed

    private void allDoctorsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allDoctorsBtnActionPerformed
        // TODO add your handling code here:
       updateBtn.setText("Update Doctor Record");
String searchText= communityNameSearchComboBox.getItemAt(communityNameSearchComboBox.getSelectedIndex());
     populateDoctorTable(DoctorDirectory.doctorList, searchText);
    }//GEN-LAST:event_allDoctorsBtnActionPerformed

    private void allPersonsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPersonsBtnActionPerformed
        // TODO add your handling code here:
        updateBtn.setText("Update Person Record");
         String searchText= communityNameSearchComboBox.getItemAt(communityNameSearchComboBox.getSelectedIndex());
         populateAllPersons(PersonDirectory.personList, searchText);
    }//GEN-LAST:event_allPersonsBtnActionPerformed

    private void allPatientsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPatientsBtnActionPerformed
        // TODO add your handling code here:
        updateBtn.setText("Update Patient Record");
        String searchText= communityNameSearchComboBox.getItemAt(communityNameSearchComboBox.getSelectedIndex());
     populatePatientTable(PatientDirectory.patientList, searchText);
    }//GEN-LAST:event_allPatientsBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        
         String txt = updateBtn.getText();
          int selectedRowIndex = tblRecords.getSelectedRow();
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "No Record is selected, Please Try Again");
            return;
        }
        
         if(txt.contains("Hospital"))
        {   
            Hospital hospital = (Hospital) tblRecords.getValueAt(selectedRowIndex, 0);
        
            HospitalCrud hospitalCrud = new HospitalCrud(hospital, "update", this);
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(hospitalCrud);
            
            
        }else if (txt.contains("Doctor")){
         Doctor doctor = (Doctor) tblRecords.getValueAt(selectedRowIndex, 0);
            PatientCrud patientCrud = new PatientCrud(doctor, "du");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(patientCrud);
    }  else if(txt.contains("Patient"))
        {   
            Patient patient = (Patient) tblRecords.getValueAt(selectedRowIndex, 0);
        
            PatientCrud patientCrud = new PatientCrud(patient, "pu");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(patientCrud);
        }else if(txt.contains("Person"))
        {
            Person person = (Person ) tblRecords.getValueAt(selectedRowIndex, 0);
            PersonCrud personCrud = new PersonCrud(person);
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(personCrud);
        }
    }//GEN-LAST:event_updateBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allDoctorsBtn;
    private javax.swing.JButton allHospitalBtn;
    private javax.swing.JButton allPatientsBtn;
    private javax.swing.JButton allPersonsBtn;
    private javax.swing.JComboBox<String> communityNameSearchComboBox;
    private javax.swing.JLabel communityNameSearchLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logoutLabel;
    private javax.swing.JTable tblRecords;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    private void populateHospitalTable(ArrayList<Hospital> hospitalList, String searchText) {
        ArrayList<Hospital> result = new ArrayList<>();
     for(Hospital hospital: hospitalList)
     {
         if(hospital.getCommunity().getCommunityName().equalsIgnoreCase(searchText))
         {
             result.add(hospital);
         }
     }
     
      DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
      
        
        tableModel.addColumn("ID" );
       
        tableModel.addColumn("Hospital Name");
       
        tableModel.addColumn("Community Name");
        
       
        
        
        try {
            for (Hospital  hospital : result) {

                Object[] row = new Object[3];
                row[0] = hospital;
                row[1] = hospital.getHospitalName();
                row[2] = hospital.getCommunity().getCommunityName();
               
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }

     
     
    }

    private void populateDoctorTable(ArrayList<Doctor> doctorList, String searchText) {
       
         ArrayList<Doctor> result = new ArrayList<>();
     for(Doctor doctor: doctorList)
     {
         if(doctor.getPerson().getResidence().getCommunity().getCommunityName().equalsIgnoreCase(searchText))
         {
             result.add(doctor);
         }
     }
     
     
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
         tableModel.setRowCount(0);
         tableModel.setColumnCount(0);
        
       
        
        tableModel.addColumn("ID" );
       
        tableModel.addColumn("Doctor Name");
       

        try {
            for (Doctor  doctor : result) {

                Object[] row = new Object[2];
                row[0] = doctor;
                row[1] = doctor.getPerson().getName();
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }
       
    }

    private void populatePatientTable(ArrayList<Patient> patientList, String searchText) {
       
         
         ArrayList<Patient> result = new ArrayList<>();
     for(Patient patient: patientList)
     {
         if(patient.getPerson().getResidence().getCommunity().getCommunityName().equalsIgnoreCase(searchText))
         {
             result.add(patient);
         }
     }
     
     
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
         tableModel.setRowCount(0);
         tableModel.setColumnCount(0);
         
           tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
        tableModel.addColumn("ID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Gender");
        tableModel.addColumn("Age");
       
      
       
        tableModel.setRowCount(0);
        try {
            for (Patient  patient : result) {

                Object[] row = new Object[4];
                row[0] = patient;
                row[1] = patient.getPerson().getName();
                row[2] = patient.getPerson().getGender();
                row[3] = patient.getPerson().getAge();
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }
        
    }

    private void populateComboBox() {
        communityNameSearchComboBox.removeAllItems();
        for(Community community: CommunityDirectory.communityList)
        {
            communityNameSearchComboBox.addItem(community.getCommunityName());
        }
    }

    private void populateAllPersons(ArrayList<Person> personList, String searchText) {
       
        
         ArrayList<Person> result = new ArrayList<>();
     for(Person person: personList)
     {
         if(person.getResidence().getCommunity().getCommunityName().equalsIgnoreCase(searchText))
         {
             result.add(person);
         }
     }
     
     
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
         tableModel.setRowCount(0);
         tableModel.setColumnCount(0);
         
           tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
        tableModel.addColumn("ID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Gender");
        tableModel.addColumn("Age");
       
      
       
        tableModel.setRowCount(0);
        try {
            for (Person  patient : result) {

                Object[] row = new Object[4];
                row[0] = patient;
                row[1] = patient.getName();
                row[2] = patient.getGender();
                row[3] = patient.getAge();
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }
        
    }
}
