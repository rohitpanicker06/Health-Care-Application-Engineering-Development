/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import doctor.Doctor;
import doctor.DoctorDirectory;
import hospital.Hospital;
import hospital.HospitalDirectory;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import patient.Patient;
import patient.PatientDirectory;
import person.Person;
import rbac.context.RbacApplicationContext;
import ui.crud.panels.HospitalCrud;
import ui.crud.panels.PatientCrud;
import ui.crud.panels.PersonCrud;

/**
 *
 * @author rohitpanicker
 */
public class HospitalAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalAdminPanel
     */
    
    private Hospital hospital = null;
    
    public HospitalAdminPanel() {
        
        initComponents();
        setSearchComponentsVisibility(false);
        searchTxtField.setVisible(false);
    }
    public void setSearchComponentsVisibility(boolean value)
    {
        searchLabel.setVisible(value);
        searchByComboBox.setVisible(value);
        goBtn.setVisible(value);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        logoutLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        allHospitalBtn2 = new javax.swing.JButton();
        searchHospitalBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecords = new javax.swing.JTable();
        searchLabel = new javax.swing.JLabel();
        searchByComboBox = new javax.swing.JComboBox<>();
        updateBtn = new javax.swing.JButton();
        goBtn = new javax.swing.JButton();
        deleteHospitalBtn = new javax.swing.JButton();
        createHospitalBtn = new javax.swing.JButton();
        viewDetailsBtn = new javax.swing.JButton();
        viewPatientsBtn = new javax.swing.JButton();
        viewAllDoctorsBtn = new javax.swing.JButton();
        searchTxtField = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(0, 153, 0));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("MEDICAL RESOURCE FINDER");

        logoutLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        logoutLabel.setForeground(new java.awt.Color(255, 255, 255));
        logoutLabel.setText("Logout");
        logoutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logoutLabelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(479, 479, 479)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(205, 205, 205)
                .addComponent(logoutLabel)
                .addContainerGap(302, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(logoutLabel))
                .addContainerGap())
        );

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 1390, 70));

        jPanel4.setBackground(new java.awt.Color(0, 204, 51));

        jPanel5.setBackground(new java.awt.Color(200, 248, 202));

        jLabel5.setBackground(new java.awt.Color(0, 102, 51));
        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("WELCOME");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        allHospitalBtn2.setText("All Hospitals");
        allHospitalBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allHospitalBtn2ActionPerformed(evt);
            }
        });

        searchHospitalBtn.setText("Search Hospital");
        searchHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchHospitalBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(searchHospitalBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(allHospitalBtn2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(allHospitalBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(searchHospitalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 260, 860));

        tblRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Gender", "Age"
            }
        ));
        jScrollPane1.setViewportView(tblRecords);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 70, 1060, 200));

        searchLabel.setText("Search By");
        add(searchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 300, 140, 30));

        searchByComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(searchByComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 290, 180, 50));

        updateBtn.setText("Update Hospital Record");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 370, 180, 30));

        goBtn.setText("Go");
        goBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBtnActionPerformed(evt);
            }
        });
        add(goBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 300, 110, 30));

        deleteHospitalBtn.setText("Delete Hospital");
        deleteHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHospitalBtnActionPerformed(evt);
            }
        });
        add(deleteHospitalBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 510, 180, 30));

        createHospitalBtn.setText("Create Hospital");
        createHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createHospitalBtnActionPerformed(evt);
            }
        });
        add(createHospitalBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 440, 180, 30));

        viewDetailsBtn.setText("View Hospital Details");
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });
        add(viewDetailsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 580, 180, 30));

        viewPatientsBtn.setText("View Patients");
        viewPatientsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientsBtnActionPerformed(evt);
            }
        });
        add(viewPatientsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 370, 220, 30));

        viewAllDoctorsBtn.setText("View Doctors");
        viewAllDoctorsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllDoctorsBtnActionPerformed(evt);
            }
        });
        add(viewAllDoctorsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 440, 220, 30));
        add(searchTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 300, 160, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void logoutLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutLabelMousePressed
        // TODO add your handling code here:

        RbacApplicationContext rbacApplicationContext = RbacApplicationContext.getInstance();
        rbacApplicationContext.setRoleContext(null);
        rbacApplicationContext.setUser(null);
        JOptionPane.showMessageDialog(this, "Logged Out");
        HomeScreenNotDefault homeScreenNotDefault = new HomeScreenNotDefault();
        HomeScreen.homeScreen.getjSplitPane1().setRightComponent(homeScreenNotDefault);
        HomeScreen.homeScreen.getjSplitPane1().setDividerLocation(150);
    }//GEN-LAST:event_logoutLabelMousePressed

    private void viewAllDoctorsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllDoctorsBtnActionPerformed
        // TODO add your handling code here:
        
        updateBtn.setText("Update Doctor Record");
        createHospitalBtn.setText("Create Doctor Record");
        deleteHospitalBtn.setText("Delete Doctor Record");
        viewDetailsBtn.setText("View Doctor Details");
        
         int selectedRowIndex = tblRecords.getSelectedRow();
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "No Patient is selected, Please Try Again");
            return;
        }
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
         
         Hospital hospital = (Hospital) tableModel.getValueAt(selectedRowIndex, 0);
         this.hospital = hospital;
         populateDoctorRecords(hospital.getDoctorList());
        
       
    }//GEN-LAST:event_viewAllDoctorsBtnActionPerformed
    private void populateDoctorRecords(ArrayList<Doctor> doctorList)
    {
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
      
        
        tableModel.addColumn("ID" );
       
        tableModel.addColumn("Doctor Name");
       
        tableModel.addColumn("Age");
        
        tableModel.addColumn("Hospital");
        
       
        
        
        try {
            for (Doctor  doctor : doctorList) {

                Object[] row = new Object[4];
                row[0] = doctor;
                row[1] = doctor.getPerson().getName();
                row[2] = doctor.getPerson().getAge();
                row[3] = doctor.getHospital().getHospitalName();
               
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }
    }
    
     private void populatePatientRecords(ArrayList<Patient> patientList)
    {
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
      
        
        tableModel.addColumn("ID" );
       
        tableModel.addColumn("Patient Name");
       
        tableModel.addColumn("Age");
        
        tableModel.addColumn("Community Name");
        tableModel.addColumn("ZipCode");
        
        
       
        
        
        try {
            for (Patient  patient : patientList) {

                Object[] row = new Object[5];
                row[0] = patient;
                row[1] = patient.getPerson().getName();
                row[2] = patient.getPerson().getAge();
                row[3] = patient.getPerson().getResidence().getCommunity().getCommunityName();
                row[4] = patient.getPerson().getResidence().getCommunity().getZipCode();
               
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }
    }
    private void viewPatientsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientsBtnActionPerformed
        // TODO add your handling code here:
        updateBtn.setText("Update Patient Record");
        createHospitalBtn.setText("Create Patient Record");
        deleteHospitalBtn.setText("Delete Patient Record");
        viewDetailsBtn.setText("View Patient Details");
         int selectedRowIndex = tblRecords.getSelectedRow();
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "No Patient is selected, Please Try Again");
            return;
        }
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
         
         Hospital hospital = (Hospital) tableModel.getValueAt(selectedRowIndex, 0);
         this.hospital = hospital;
         populatePatientRecords(hospital.getPatientList());
         
    }//GEN-LAST:event_viewPatientsBtnActionPerformed

    private void allHospitalBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allHospitalBtn2ActionPerformed
        // TODO add your handling code here:
       searchByComboBox.setVisible(false);
       searchLabel.setVisible(false);
       goBtn.setVisible(false);
       searchTxtField.setVisible(false);
        updateBtn.setText("Update Hospital Record");
        createHospitalBtn.setText("Create New Hospital");
        deleteHospitalBtn.setText("Delete Hospital");
        viewDetailsBtn.setText("View Hospital Details");
        String searchText= searchByComboBox.getItemAt(searchByComboBox.getSelectedIndex());
        populateHospitalTable(HospitalDirectory.hospitalList);
    }//GEN-LAST:event_allHospitalBtn2ActionPerformed

    private void searchHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchHospitalBtnActionPerformed
        // TODO add your handling code here:
        setSearchComponentsVisibility(true);
        searchTxtField.setVisible(true);
        populateJCombobox();
        
    }//GEN-LAST:event_searchHospitalBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:

        String txt = updateBtn.getText();
        int selectedRowIndex = tblRecords.getSelectedRow();
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "No Record is selected, Please Try Again");
            return;
        }

        if(txt.contains("Hospital"))
        {
            Hospital hospital = (Hospital) tblRecords.getValueAt(selectedRowIndex, 0);

            HospitalCrud hospitalCrud = new HospitalCrud(hospital, "update", this);
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(hospitalCrud);

        }else if (txt.contains("Doctor")){
            Doctor doctor = (Doctor) tblRecords.getValueAt(selectedRowIndex, 0);
            PatientCrud patientCrud = new PatientCrud(doctor, "du");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(patientCrud);
        }  else if(txt.contains("Patient"))
        {
            Patient patient = (Patient) tblRecords.getValueAt(selectedRowIndex, 0);

            PatientCrud patientCrud = new PatientCrud(patient, "pu");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(patientCrud);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHospitalBtnActionPerformed
        // TODO add your handling code here:
        
        String txt = deleteHospitalBtn.getText();
         int selectedRowIndex = tblRecords.getSelectedRow();

            if (selectedRowIndex == -1) {
                JOptionPane.showMessageDialog(this, "No Row is selected to Delete, Please Try Again");
                return;
            }
        if(txt.contains("Patient")){
        
           
            DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
            Patient patient = (Patient) tableModel.getValueAt(selectedRowIndex, 0);
            deleteRecord(patient);
            populateTableWithPatientRecords();
          
       
        }
        else if (txt.contains("Doctor")){
             DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
            Doctor doctor = (Doctor) tableModel.getValueAt(selectedRowIndex, 0);
            deleteDoctorRecord(doctor);
            populateTableWithDoctorRecords();
            
        }else if (txt.contains("Hospital")){
             DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
            Hospital hospital = (Hospital) tableModel.getValueAt(selectedRowIndex, 0);
            deleteHospitalRecord(hospital);
            populateTableWithHospitalRecords();
        }
        
    }//GEN-LAST:event_deleteHospitalBtnActionPerformed
 private void deleteRecord(Patient patient){
   this.hospital.getPatientList().remove(patient);
   

        JOptionPane.showMessageDialog(this, "Record deleted successfully");
        
}
    private void createHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createHospitalBtnActionPerformed
        // TODO add your handling code here:
         
      String txt = createHospitalBtn.getText();
        if(txt.contains("Patient"))
        {
            PatientCrud patientCrud = new PatientCrud("cp");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(patientCrud);
        }else if(txt.contains("Doctor")){
            PatientCrud patientCrud = new PatientCrud("cd");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(patientCrud);   
    }else if (txt.contains("Hospital"))
    {
        HospitalCrud hospitalCrud = new HospitalCrud("create");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(hospitalCrud); 
    }
    }//GEN-LAST:event_createHospitalBtnActionPerformed

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed
        // TODO add your handling code here:
           String txt = viewDetailsBtn.getText();
         int selectedRowIndex = tblRecords.getSelectedRow();
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "No Patient is selected, Please Try Again");
            return;
        }
        
         if(txt.contains("Patient"))
        {   
            
        Patient patient = (Patient) tblRecords.getValueAt(selectedRowIndex, 0);
        
            PatientCrud patientCrud = new PatientCrud(patient, "pv");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(patientCrud);
        }else if(txt.contains("Doctor")){
             
            Doctor doctor = (Doctor) tblRecords.getValueAt(selectedRowIndex, 0);
            PatientCrud patientCrud = new PatientCrud(doctor, "dv");
            HomeScreen.homeScreen.getjSplitPane1().setRightComponent(patientCrud);
        
    }else if(txt.contains("Hospital"))
    {
         Hospital hospital = (Hospital) tblRecords.getValueAt(selectedRowIndex, 0);
         HospitalCrud hospitalCrud = new HospitalCrud(hospital,"populate");
          HomeScreen.homeScreen.getjSplitPane1().setRightComponent(hospitalCrud);
         
    }
    }//GEN-LAST:event_viewDetailsBtnActionPerformed

    private void goBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBtnActionPerformed
        // TODO add your handling code here:
        
        String selectedIndex = (String) searchByComboBox.getSelectedItem();
        String searchText = searchTxtField.getText();
        
        ArrayList<Hospital> result = new ArrayList<>();
        
        if(selectedIndex.contains("ID"))
        {
            result = searchById(searchText, result);
        }else if(selectedIndex.contains("Name"))
        {
            result = searchByName(searchText, result);
        }else if(selectedIndex.contains("City")){
            result = searchByCity(searchText, result);
        }else if(selectedIndex.contains("Community")){
            result = searchByCommunity(searchText, result);
        }
        populateHospitalTable(result);
    }//GEN-LAST:event_goBtnActionPerformed
private void populateAndFillRecordsTable(ArrayList<Patient> patientList) {
        DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();

        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
        tableModel.addColumn("ID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Gender");
        tableModel.addColumn("Age");
        /* JTableHeader th = tblRecords.getTableHeader();
         TableColumnModel tcm = th.getColumnModel();
         TableColumn tc = tcm.getColumn(0);
        tc.setHeaderValue( "ID" );
        TableColumn tc_one = tcm.getColumn(1);
        tc_one.setHeaderValue("Name");
        TableColumn tc_two = tcm.getColumn(2);
        tc_two.setHeaderValue("Gender");
        TableColumn tc_three = tcm.getColumn(3);
        tc_three.setHeaderValue("Age");*/
        try{
        TableColumn tableColumn = tblRecords.getColumnModel().getColumn(4);
        tblRecords.removeColumn(tableColumn);
        
        }catch(Exception e)
        {
            System.out.println("Error while deleting table column 4");
        }
        
        try{
        TableColumn tableColumn_two = tblRecords.getColumnModel().getColumn(4);
        tblRecords.removeColumn(tableColumn_two);
        }catch(Exception e)
        {
            System.out.println("Error while deleting table column 5");
        }
       // th.repaint();
        tableModel.setRowCount(0);
        try {
            for (Patient  patient : patientList) {

                Object[] row = new Object[4];
                row[0] = patient;
                row[1] = patient.getPerson().getName();
                row[2] = patient.getPerson().getGender();
                row[3] = patient.getPerson().getAge();
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allHospitalBtn2;
    private javax.swing.JButton createHospitalBtn;
    private javax.swing.JButton deleteHospitalBtn;
    private javax.swing.JButton goBtn;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logoutLabel;
    private javax.swing.JComboBox<String> searchByComboBox;
    private javax.swing.JButton searchHospitalBtn;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTxtField;
    private javax.swing.JTable tblRecords;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton viewAllDoctorsBtn;
    private javax.swing.JButton viewDetailsBtn;
    private javax.swing.JButton viewPatientsBtn;
    // End of variables declaration//GEN-END:variables

     private void populateHospitalTable(ArrayList<Hospital> hospitalList) {
       
    
     
      DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);
      
        
        tableModel.addColumn("ID" );
       
        tableModel.addColumn("Hospital Name");
       
        tableModel.addColumn("Community Name");
        
        tableModel.addColumn("ZipCode");
        
       
        
        
        try {
            for (Hospital  hospital : hospitalList) {

                Object[] row = new Object[4];
                row[0] = hospital;
                row[1] = hospital.getHospitalName();
                row[2] = hospital.getCommunity().getCommunityName();
                row[3] = hospital.getCommunity().getZipCode();
               
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }

     
     
    }
 private void deleteDoctorRecord(Doctor doctor)
    {
      this.hospital.getDoctorList().remove(doctor);
       JOptionPane.showMessageDialog(this, "Record deleted successfully");
      
    }

  private void deleteHospitalRecord(Hospital hospital)
   {
       HospitalDirectory.hospitalList.remove(hospital);
       JOptionPane.showMessageDialog(this, "Record deleted successfully");
      
   }

    private void populateTableWithPatientRecords() {
       
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
        tableModel.setRowCount(0);
      
         JTableHeader th = tblRecords.getTableHeader();
         
         tableModel.setColumnCount(0);
        tableModel.addColumn("ID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Gender");
        tableModel.addColumn("Age");
        tableModel.addColumn("Hospital");
        
         
         
         
       
        try {
            for (Patient  patient : this.hospital.getPatientList()) {

                Object[] row = new Object[5];
                row[0] = patient;
                row[1] = patient.getPerson().getName();
                row[2] = patient.getPerson().getGender();
                row[3] = patient.getPerson().getAge();
                row[4] = patient.getHospital().getHospitalName();
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }
    }

    private void populateTableWithDoctorRecords() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
          tableModel.setRowCount(0);
       
        tableModel.setColumnCount(0);
        tableModel.addColumn("ID");
        tableModel.addColumn("Doctor Name");
        tableModel.addColumn("Age");
        tableModel.addColumn("Hospital");
        
       
      
       
        
        try {
            for (Doctor  doctor : this.hospital.getDoctorList()) {

                Object[] row = new Object[4];
                row[0] = doctor;
                row[1] = doctor.getPerson().getName();
                row[2] = doctor.getPerson().getAge();
                row[3] = doctor.getHospital().getHospitalName();
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }
    }

    private void populateTableWithHospitalRecords() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    
         DefaultTableModel tableModel = (DefaultTableModel) tblRecords.getModel();
        tableModel.setRowCount(0);
        HospitalDirectory hospitalDirectory = new HospitalDirectory();
        
          
        tableModel.setColumnCount(0);
        tableModel.addColumn("ID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Doctor Count");
        tableModel.addColumn("Community Name");
        tableModel.addColumn("Zip Code");
        
        
      
       
        
        
        try {
            for (Hospital  hospital : hospitalDirectory.getHospitalList()) {

                Object[] row = new Object[5];
                row[0] = hospital;
                row[1] = hospital.getHospitalName();
                row[2] = hospital.getDoctorList().size();
                row[3] = hospital.getCommunity().getCommunityName();
                row[4] = hospital.getCommunity().getZipCode();
               
                tableModel.addRow(row);

            }
        } catch (Exception e) {
            System.out.println("Exception occured while populating Table e= " + e.getMessage());
        }
    }

    private void populateJCombobox() {
    
    searchByComboBox.removeAllItems();
    searchByComboBox.addItem("ID");
    searchByComboBox.addItem("Name");
    searchByComboBox.addItem("City");
    searchByComboBox.addItem("Community");
    }

    private ArrayList<Hospital> searchById(String id, ArrayList<Hospital> result) {
     
        
        
        for(Hospital hospital: HospitalDirectory.hospitalList){
         if(hospital.getHospitalId() == Integer.parseInt(id)){
            
             
             result.add(hospital);
             return result;
         }
     }
        return result;
    }
    
    
    
    private ArrayList<Hospital> searchByCity(String city, ArrayList<Hospital> result) {
     
        
        
        for(Hospital hospital: HospitalDirectory.hospitalList){
         if(hospital.getCommunity().getCity().getName().contains(city)){
             
             result.add(hospital);
             
         }
     }
        return result;
    }
    
    
    private ArrayList<Hospital> searchByName(String name, ArrayList<Hospital> result) {
     
        
        
        for(Hospital hospital: HospitalDirectory.hospitalList){
         if(hospital.getHospitalName().contains(name)){
             
             result.add(hospital);
             
         }
     }
        return result;
    }
    
      private ArrayList<Hospital> searchByCommunity(String community, ArrayList<Hospital> result) {
     
        
        
        for(Hospital hospital: HospitalDirectory.hospitalList){
         if(hospital.getCommunity().getCommunityName().contains(community)){
             
             result.add(hospital);
             
         }
     }
        return result;
    }
    
    
    
    

}
